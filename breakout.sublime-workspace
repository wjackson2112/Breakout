{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"SDL_GetPer",
				"SDL_GetPerformanceFrequency	(Ball.cpp)"
			],
			[
				"State",
				"StateMachineCB"
			],
			[
				"alp",
				"alphaTransitionComplete	(Block.h)"
			],
			[
				"alph",
				"alphaCB"
			],
			[
				"SDL_Get",
				"SDL_GetPerformanceFrequency	(Ball.cpp)"
			],
			[
				"SDL_SetT",
				"SDL_SetTextureColorMod"
			],
			[
				"paddle",
				"paddle_sound	(Ball.h)"
			],
			[
				"Sound",
				"SoundBuffer"
			],
			[
				"FLYING",
				"FLYING_ST"
			],
			[
				"LOST",
				"LOST_ST"
			],
			[
				"WAIT",
				"WAITING_ST"
			],
			[
				"StateM",
				"StateMachineCB	(StateMachine.h)"
			],
			[
				"SDL",
				"SDL_Surface"
			],
			[
				"CSimple",
				"CSimpleIniA"
			],
			[
				"scre",
				"screenHeight	(Globals.h)"
			],
			[
				"blo",
				"blockHeight	(Globals.h)"
			],
			[
				"Globa",
				"Globals::fieldWidth"
			],
			[
				"block",
				"blockWidth	(Globals.h)"
			],
			[
				"scree",
				"screenHeight	(Globals.h)"
			],
			[
				"screen",
				"screenHeight	(Globals.h)"
			],
			[
				"getFiel",
				"getFieldHeight	(GameManager.cpp)"
			],
			[
				"getField",
				"getFieldHeight	(Globals.h)"
			],
			[
				"get",
				"getBlockWidth"
			],
			[
				"getBlock",
				"getBlockHeight"
			],
			[
				"getScre",
				"getScreenHeight	(main.cpp)"
			],
			[
				"fiel",
				"FIELD_RATIO"
			],
			[
				"bloc",
				"block_height"
			],
			[
				"field",
				"field_width"
			],
			[
				"FIELD",
				"FIELD_RATIO"
			],
			[
				"scren",
				"screen_width"
			],
			[
				"SCREEN",
				"SCREEN_WIDTH"
			],
			[
				"SCE",
				"SCREEN_HEIGHT	(GameManager.cpp)"
			],
			[
				"SCRE",
				"SCREEN_WIDTH"
			],
			[
				"GAME",
				"GAME_RUNNING"
			],
			[
				"GA",
				"GAME_PAUSED"
			],
			[
				"menu",
				"menuQuit"
			],
			[
				"GamEve",
				"GameEventStr	(EventManager.h)"
			],
			[
				"GameEve",
				"GameEventStr	(EventManager.h)"
			],
			[
				"BAL",
				"BALLS_DEPLETED"
			],
			[
				"print",
				"printHandlers	(EventManager.h)"
			],
			[
				"bal",
				"ballsRemaining"
			],
			[
				"Event",
				"EventManager	(ProgramManager.h)"
			],
			[
				"clear",
				"clearGameEvents"
			],
			[
				"SDL_SC",
				"SDL_SCANCODE_P"
			],
			[
				"SCREE",
				"SCREEN_HEIGHT"
			],
			[
				"SRC",
				"SRC_DIR"
			],
			[
				"colli",
				"collisionClone	(Entity.h)"
			],
			[
				"col",
				"collisionClone	(Entity.h)"
			],
			[
				"event",
				"eventHandlers"
			],
			[
				"update",
				"updateVelocityWithAngle"
			],
			[
				"handle",
				"handleEvents	(GameManager.h)"
			],
			[
				"ENTY",
				"ENTITY_HEIGHT	(Entity.h)"
			],
			[
				"ENTITY_",
				"ENTITY_WIDTH	(Entity.h)"
			],
			[
				"instance",
				"instanceFlag	(EventHandler.h)"
			],
			[
				"key",
				"keyDownCallbacks"
			],
			[
				"registerKe",
				"registerKeyDown	(EventHandler.h)"
			],
			[
				"ca",
				"callbacks"
			],
			[
				"handl",
				"handleEvents	(EventHandler.h)"
			],
			[
				"quit",
				"quitReceived"
			],
			[
				"SDL_Rend",
				"SDL_RenderPresent	(09_the_viewport_SDL.cpp)"
			],
			[
				"Render",
				"Renderer	(09_the_viewport_SDL.cpp)"
			],
			[
				"SDL_Create",
				"SDL_CreateRenderer	(09_the_viewport_SDL.cpp)"
			],
			[
				"SDL_WINDOW",
				"SDL_WINDOWPOS_UNDEFINED"
			],
			[
				"SCREEN_",
				"SCREEN_WIDTH"
			],
			[
				"SDL_Des",
				"SDL_DestroyRenderer	(07_texture_loading_and_rendering_SDL.cpp)"
			],
			[
				"IMG",
				"IMG_Load"
			],
			[
				"top",
				"topRightViewport"
			],
			[
				"to",
				"topLeftViewport"
			],
			[
				"SCR",
				"SCREEN_WIDTH"
			],
			[
				"stretc",
				"stretchRect"
			],
			[
				"loaded",
				"loadedSurface"
			],
			[
				"optim",
				"optimizedSurface"
			],
			[
				"Key",
				"KEY_PRESS_SURFACE_DEFAULT"
			],
			[
				"KEY",
				"KEY_PRESS_SURFACE_RIGHT"
			],
			[
				"load",
				"loadSurface"
			]
		]
	},
	"buffers":
	[
		{
			"file": "include/Ball.h",
			"settings":
			{
				"buffer_size": 1160,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Ball.cpp",
			"settings":
			{
				"buffer_size": 6410,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Block.h",
			"settings":
			{
				"buffer_size": 1180,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Block.cpp",
			"settings":
			{
				"buffer_size": 3258,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/AssetFactory.cpp",
			"settings":
			{
				"buffer_size": 1752,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/AssetFactory.h",
			"settings":
			{
				"buffer_size": 607,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 3351,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/StateMachine.h",
			"settings":
			{
				"buffer_size": 733,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Effects.h",
			"settings":
			{
				"buffer_size": 2421,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 80 files for \"cout\" (case sensitive)\n\n/home/will/Documents/git/Breakout/breakout:\n    <binary>\n\n/home/will/Documents/git/Breakout/build/breakout:\n    <binary>\n\n/home/will/Documents/git/Breakout/cscope.out:\n    <binary>\n\n/home/will/Documents/git/Breakout/include/AssetFactory.h:\n   26  	template<typename T>	\n   27  	T* getAsset(string key){\n   28: 		std::cout << \"Unsupported type for Asset Factory\" << std::endl;\n   29  	}\n   30  \n\n/home/will/Documents/git/Breakout/src/AssetFactory.cpp:\n   13  \n   14  void AssetFactory::printAssets(){\n   15: 	cout << \"Textures\" << endl;\n   16  	for(auto it = textures.begin(); it != textures.end(); ++it){\n   17: 		cout << it->first << \":\" << (it->second) << \" \";\n   18  	}\n   19: 	cout << endl;\n   20  }\n   21  \n\n/home/will/Documents/git/Breakout/src/Ball.cpp:\n  124  void Ball::resolveCollision(PhysicsEntity* collider, PhysicsEntity* object)\n  125  {\n  126: 	//std::cout << \"Ball resolving\" << std::endl;\n  127  	//Bounce off the paddle\n  128  	if(dynamic_cast<Paddle*> (object) != NULL)\n\n/home/will/Documents/git/Breakout/src/Block.cpp:\n  100  			{\n  101  				case IDLE_ST:\n  102: 					std::cout << &(this->effects) << std::endl;\n  103  					this->effects->addAlphaTransition(250, 255, 0);\n  104  					SDL_SetTextureAlphaMod(this->texture, 50);\n\n/home/will/Documents/git/Breakout/src/Button.cpp:\n   17  	if(font == nullptr)\n   18  	{\n   19: 		std::cout << \"Couldn't load font: \" << SDL_GetError() << std::endl;\n   20  	}\n   21  \n\n/home/will/Documents/git/Breakout/src/Effects.cpp:\n   34  	alphaFrames.front()->update(timeElapsed, this->a);\n   35  \n   36: 	// std::cout << timeElapsed << \" seconds elapsed\" << std::endl;\n   37  \n   38  	// if(colorFrames->size() != 0)\n\n/home/will/Documents/git/Breakout/src/EventManager.cpp:\n   43  void EventManager::printHandlers()\n   44  {\n   45: 	std::cout << \"Registered Handlers: |\";\n   46  	for(auto &handler : eventHandlers)\n   47  	{\n   48: 		std::cout << handler->type() << \"|\";\n   49  	}\n   50: 	std::cout << std::endl;\n   51  }\n   52  \n\n/home/will/Documents/git/Breakout/src/GameManager.cpp:\n  164  	}\n  165  \n  166: 	//std::cout << \"Updating\" << std::endl;\n  167  	for(std::vector<PhysicsEntity*>::iterator it=physicsEntities.begin(); it!=physicsEntities.end();)\n  168  	{\n  ...\n  174  		{\n  175  			delete * it;\n  176: 			//std::cout << \"Deleted\" << std::endl;\n  177  			it = physicsEntities.erase(it);\n  178: 			//std::cout << \"Erased\" << std::endl;\n  179  		}\n  180  		else\n\n/home/will/Documents/git/Breakout/src/Sound.cpp:\n    7  	if((error = alGetError()) != AL_NO_ERROR)\n    8  	{\n    9: 		std::cout << source << \" gave error \";\n   10  		switch(error)\n   11  		{\n   12  			case AL_NO_ERROR:\n   13: 				std::cout << \"AL_NO_ERROR\" << std::endl;\n   14  			case AL_INVALID_NAME:\n   15: 				std::cout << \"AL_INVALID_NAME\" << std::endl;\n   16  				break;\n   17  			case AL_INVALID_ENUM:\n   18: 				std::cout << \"AL_INVALID_NAME\" << std::endl;\n   19  				break;\n   20  			case AL_INVALID_VALUE:\n   21: 				std::cout << \"AL_INVALID_NAME\" << std::endl;\n   22  				break;\n   23  			case AL_INVALID_OPERATION:\n   24: 				std::cout << \"AL_INVALID_NAME\" << std::endl;\n   25  				break;\n   26  			case AL_OUT_OF_MEMORY:\n   27: 				std::cout << \"AL_INVALID_NAME\" << std::endl;\n   28  				break;\n   29  			default:\n   30: 				std::cout << \"UNKNOWN\" << std::endl;\n   31  				break;\n   32  		}\n\n32 matches across 12 files\n",
			"settings":
			{
				"buffer_size": 3407,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/Effects.cpp",
			"settings":
			{
				"buffer_size": 1626,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/PhysicsEntity.h",
			"settings":
			{
				"buffer_size": 359,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Entity.h",
			"settings":
			{
				"buffer_size": 672,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/Make.sublime-build",
					""
				],
				[
					"Packages/User/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/Make.sublime-build",
					"All"
				],
				[
					"Packages/User/Make.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Build With: Make - Run"
			],
			[
				"make",
				"Build With: Make - Run"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"\\",
				"Origami: Zoom/Unzoom Current Pane (Toggle Zoom)"
			],
			[
				"todo",
				"TodoReview: Open Files"
			],
			[
				"make all",
				"Build With: Make - All"
			],
			[
				"make clean",
				"Build With: Make - Clean"
			],
			[
				"make distclean",
				"Build With: Make - Distclean"
			],
			[
				"run",
				"Build With: Make - Run"
			],
			[
				"clean",
				"Build With: Make - Clean"
			],
			[
				"git quick",
				"Git: Quick Commit"
			],
			[
				"git add",
				"Git: Add All"
			],
			[
				"Cscope: ",
				"Cscope: Look up symbol"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"tags",
				"CTags: Rebuild Tags"
			],
			[
				"all",
				"Build With: Make - All"
			],
			[
				"make run",
				"Build With: Make - Run"
			],
			[
				"git diff",
				"Git: Diff All Files"
			],
			[
				"git difftool",
				"Git: Diff Tool All"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"git",
				"Git: Status"
			],
			[
				"ctags",
				"CTags: Rebuild Tags"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"color",
				"Colorsublime: Install Theme"
			]
		],
		"width": 435.0
	},
	"console":
	{
		"height": 419.0,
		"history":
		[
			"view.run_command(\"ansi\")",
			"sublime.run_command(\"color_scheme_emergency_reset\")",
			"class ColorSchemeEmergencyResetCommand(sublime_plugin.ApplicationCommand):",
			"import sublime_plugin",
			"import sublime",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/will/Documents/git/Breakout",
		"/home/will/Documents/git/Breakout/include",
		"/home/will/Documents/git/Breakout/sounds",
		"/home/will/Documents/git/Breakout/src"
	],
	"file_history":
	[
		"/home/will/Documents/git/Breakout/Makefile",
		"/home/will/Documents/git/Breakout/src/Block.cpp",
		"/home/will/Documents/git/Breakout/src/Ball.cpp",
		"/home/will/Documents/git/Breakout/include/Block.h",
		"/home/will/Documents/git/Breakout/src/Sound.cpp",
		"/home/will/Documents/git/Breakout/src/AssetFactory.cpp",
		"/home/will/Documents/git/Breakout/include/StateMachine.h",
		"/home/will/Documents/git/Breakout/src/BallsIndicator.cpp",
		"/home/will/Documents/git/Breakout/include/Paddle.h",
		"/home/will/Documents/git/Breakout/include/Ball.h",
		"/home/will/Documents/git/Breakout/src/Paddle.cpp",
		"/home/will/Documents/git/Breakout/include/GameManager.h",
		"/home/will/Documents/git/Breakout/src/GameManager.cpp",
		"/home/will/Documents/git/Breakout/include/ProgramManager.h",
		"/home/will/Documents/git/Breakout/src/ProgramManager.cpp",
		"/home/will/Documents/git/Breakout/include/BallsIndicator.h",
		"/home/will/Documents/git/Breakout/include/AssetFactory.h",
		"/home/will/Documents/git/Breakout/include/Sound.h",
		"/home/will/Documents/git/Breakout/src/main.cpp",
		"/home/will/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/will/.config/sublime-text-3/Packages/User/CTags.sublime-settings",
		"/home/will/Documents/git/Breakout/breakout.sublime-project",
		"/home/will/Documents/git/Breakout/include/Entity.h",
		"/home/will/Documents/git/Breakout/src/StateMachine.cpp",
		"/home/will/Documents/git/Breakout/include/SimpleIni.h",
		"/home/will/Documents/git/Breakout/breakout.ini",
		"/home/will/Documents/git/Breakout/include/Globals.h",
		"/home/will/Documents/git/Breakout/src/Globals.cpp",
		"/home/will/Documents/git/Breakout/include/TextureFactory.h",
		"/home/will/Documents/git/Breakout/include/IEventHandler.h",
		"/home/will/Documents/git/Breakout/include/Types.h",
		"/home/will/Documents/git/Breakout/src/TextureFactory.cpp",
		"/home/will/Documents/SDL Tutorial/07_texture_loading_and_rendering_SDL.cpp",
		"/home/will/Documents/git/Breakout/include/MenuManager.h",
		"/home/will/Documents/git/Breakout/src/MenuManager.cpp",
		"/home/will/Documents/git/Breakout/src/Button.cpp",
		"/home/will/Documents/git/Breakout/include/Collider.h",
		"/home/will/Documents/git/Breakout/include/Button.h",
		"/home/will/Documents/git/Breakout/src/Collider.cpp",
		"/home/will/Documents/git/Breakout/src/PauseMenuManager.cpp",
		"/home/will/Documents/git/Breakout/include/EventManager.h",
		"/home/will/Documents/git/Breakout/include/PauseMenuManager.h",
		"/home/will/Documents/git/Breakout/include/UIEntity.h",
		"/home/will/Documents/git/Breakout/include/PhysicsEntity.h",
		"/home/will/Documents/git/Breakout/src/EventManager.cpp",
		"/usr/include/c++/4.9/bits/stl_iterator.h",
		"/build/buildd/glibc-2.21/sysdeps/unix/syscall-template.S",
		"/home/will/Documents/git/Breakout/include/IBallDelegate.h",
		"/home/will/Documents/git/Breakout/include/IBallsIndicatorDelegate.h",
		"/home/will/.config/sublime-text-3/Packages/User/Default (Linux).sublime-mousemap",
		"/home/will/Documents/git/Breakout/src/Entity.cpp",
		"/home/will/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/will/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/usr/local/bin/colormake",
		"/usr/local/bin/testcolormake.sh",
		"/home/will/Documents/git/Breakout/build/Ball.d",
		"/home/will/Documents/git/Breakout/src/GameManager.h",
		"/home/will/Documents/git/Breakout/src/Ball.h",
		"/home/will/Documents/git/Breakout/src/Paddle.h",
		"/home/will/Documents/git/Breakout/src/Block.h",
		"/home/will/Documents/git/Breakout/src/IEventHandler.h",
		"/home/will/Documents/git/Breakout/src/UIEntity.h",
		"/home/will/Documents/git/Breakout/src/PhysicsEntity.h",
		"/home/will/Documents/git/Breakout/src/Entity.h",
		"/home/will/Documents/git/Breakout/src/IBlockDelegate.h",
		"/home/will/Documents/git/Breakout/src/UIEntity.c",
		"/home/will/Documents/git/Breakout/src/PhysicsEntity.c",
		"/home/will/Documents/git/Breakout/src/Globals.h",
		"/home/will/Documents/git/Breakout/.gitignore",
		"/home/will/Documents/git/Breakout/breakout",
		"/home/will/Documents/breakout/src/Paddle.cpp",
		"/home/will/Documents/breakout/src/Paddle.h",
		"/home/will/Documents/breakout/src/Entity.cpp",
		"/home/will/Documents/breakout/src/Ball.cpp",
		"/home/will/Documents/breakout/src/Entity.h",
		"/home/will/Documents/SDL Tutorial/09_the_viewport_SDL.cpp",
		"/home/will/Documents/breakout/src/IEventHandler.h",
		"/home/will/Documents/breakout/src/Block.cpp",
		"/home/will/Documents/breakout/src/Block.h",
		"/home/will/Documents/breakout/src/Ball.h",
		"/home/will/Documents/breakout/src/EventManager.cpp",
		"/home/will/Documents/breakout/src/EventManager.h",
		"/home/will/Documents/breakout/src/GameManager.cpp",
		"/home/will/Documents/breakout/src/GameManager.h",
		"/home/will/Documents/breakout/src/Globals.h",
		"/home/will/Documents/breakout/src/main.cpp",
		"/home/will/Documents/breakout/Makefile",
		"/home/will/Documents/breakout/breakout",
		"/home/will/Documents/SDL Tutorial/11_clip_rendering_and_sprite_sheets/LTexture.h",
		"/home/will/Documents/SDL Tutorial/11_clip_rendering_and_sprite_sheets/LTexture.cpp",
		"/home/will/Documents/SDL Tutorial/11_clip_rendering_and_sprite_sheets/11_clip_rendering_and_sprite_sheets_SDL.cpp",
		"/home/will/Documents/SDL Tutorial/10_color_keying/Makefile",
		"/home/will/Documents/SDL Tutorial/Makefile",
		"/home/will/Documents/SDL Tutorial/10_color_keying/LTexture.cpp",
		"/home/will/Documents/SDL Tutorial/10_color_keying/LTexture.h",
		"/home/will/Documents/SDL Tutorial/10_color_keying/10_color_keying_SDL.cpp",
		"/home/will/Documents/SDL Tutorial/08_geometry_rendering_SDL.cpp",
		"/home/will/Documents/SDL Tutorial/06_extension_libraries_and_loading_other_image_formats_SDL.cpp",
		"/home/will/.config/sublime-text-3/Packages/CTags/CTags.sublime-settings",
		"/usr/include/SDL2/SDL_render.h",
		"/home/will/.config/sublime-text-3/Packages/User/PlainTasks.sublime-settings",
		"/home/will/.config/sublime-text-3/Packages/PlainTasks/messages/Tutorial.todo",
		"/home/will/Documents/SDL Tutorial/05_optimized_surface_loading_and_soft_stretching_SDL.cpp",
		"/home/will/Documents/SDL Tutorial/04_key_presses_SDL.cpp",
		"/home/will/Documents/SDL Tutorial/03_event_driven_programming_SDL.cpp",
		"/home/will/Documents/SDL Tutorial/02_image_on_screen_SDL.cpp",
		"/home/will/Downloads/01_hello_SDL/Makefile",
		"/home/will/Downloads/01_hello_SDL/01_hello_SDL.cpp",
		"/home/will/Downloads/01_hello_SDL/02_image_on_screen_SDL.cpp",
		"/home/will/.config/sublime-text-3/Packages/User/Make.sublime-build",
		"/home/will/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/will/.config/sublime-text-3/Packages/User/custom.sublime-build"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 100.0,
		"where_history":
		[
			"/home/will/Documents/git/Breakout",
			"/home/will/Documents/git/Breakout/src,/home/will/Documents/git/Breakout/include",
			"\n<open folders>",
			"<current file>"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"cout",
			"SetRenderDrawColor",
			"0",
			"COMPLETE",
			"){",
			"AssetFactory",
			"string",
			"getTexture",
			"TextureFactory",
			"textureFactory",
			"TextureFactory",
			"textureFactory",
			"TextureFactory",
			"getTexture",
			"textureFactory",
			"TextureFactory",
			"textureFactory",
			"TextureFactory",
			"textureFactory",
			"TextureFactory",
			"textureFactory",
			"TextureFactory",
			"textureFactory",
			"TextureFactory",
			"getTexture",
			"TextureFactory",
			"textureFactory",
			"Texture",
			"img",
			"machineState",
			"ST",
			"state",
			"texture2",
			"assets",
			"T",
			"SDLSurface",
			"getTexture",
			", ",
			"FIELD_HEIGHT",
			"Y_OFFSET",
			"X_OFFSET",
			"FIELD_WIDTH",
			"Y_OFFSET",
			"X_OFFSET",
			"SCREEN_HEIGHT",
			"SCREEN_WIDTH",
			"Y_OFFSET",
			"X_OFFSET",
			"BLOCK_HEIGHT",
			"FIELD_WIDTH",
			"Globals.h",
			"SCREEN_HEIGHT",
			"SCREEN_WIDTH",
			"QUIT_GAME",
			"cout",
			"printf",
			"Resetting",
			"NEW_GAME",
			"\n\n	std::cout << \"Reset\" << std::endl;",
			"events[NEW_GAME]",
			"if(events[QUIT_GAME]",
			"handleGameEvents",
			"handleMouseEvents",
			"PollEvent",
			"handleKeyboardEvents",
			"isDeletable",
			");\n",
			"std::cout",
			"\\",
			"std::cout",
			"machineState",
			"delegate",
			"\\",
			"Delegate",
			"gameWon()",
			"collidedObject",
			"resolveCollision",
			"clone",
			"Clone",
			"delegate->",
			"handleGameEvents(Uint8* events);",
			"handleGameEvents(int event);",
			"GameManager",
			"resetLevel",
			"if(event == 1)",
			"handleEvents",
			")/$(@:.",
			"Entity",
			"blockCount",
			"reset",
			"delete",
			";\n",
			"accel",
			"posX",
			"WAITING_ST",
			"iterator",
			"640",
			"){\n",
			"Player",
			"0x00",
			"GameManager",
			");\n",
			"quit",
			"EventHandler",
			",\n",
			"Hello",
			"theme",
			"font"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"getAsset",
			"AssetFactory",
			"assetFactory",
			"AssetFactory",
			"assetFactory",
			"AssetFactory",
			"getAsset",
			"assetFactory",
			"AssetFactory",
			"assetFactory",
			"AssetFactory",
			"assetFactory",
			"AssetFactory",
			"assetFactory",
			"AssetFactory",
			"assetFactory",
			"AssetFactory",
			"getAsset",
			"AssetFactory",
			"assetFactory",
			"Asset",
			"textures",
			"Globals::fieldHeight",
			"Globals::yOffset",
			"Globals::xOffset",
			"Globals::fieldWidth",
			"Globals::yOffset",
			"Globals::xOffset",
			"Globals::screenHeight",
			"Globals::screenWidth",
			"Globals::yOffset",
			"Globals::xOffset",
			"Globals::blockHeight",
			"Globals::fieldWidth",
			"collider",
			"handleGameEvents(const Uint8* events);",
			"handleGameEvents(Uint8* events);",
			"handleKeyboardEvents",
			"Paddle",
			"EventManager"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "include/Ball.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1160,
						"regions":
						{
						},
						"selection":
						[
							[
								14,
								14
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Ball.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6410,
						"regions":
						{
						},
						"selection":
						[
							[
								584,
								584
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 912.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "include/Block.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1180,
						"regions":
						{
						},
						"selection":
						[
							[
								493,
								493
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Block.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3258,
						"regions":
						{
						},
						"selection":
						[
							[
								2407,
								2407
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1472.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/AssetFactory.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1752,
						"regions":
						{
						},
						"selection":
						[
							[
								826,
								826
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 237.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "include/AssetFactory.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 607,
						"regions":
						{
						},
						"selection":
						[
							[
								304,
								304
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3351,
						"regions":
						{
						},
						"selection":
						[
							[
								2754,
								2754
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 1368.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "include/StateMachine.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 733,
						"regions":
						{
						},
						"selection":
						[
							[
								444,
								444
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "include/Effects.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2421,
						"regions":
						{
						},
						"selection":
						[
							[
								1696,
								1696
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1425.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3407,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										365,
										369
									],
									[
										556,
										560
									],
									[
										662,
										666
									],
									[
										729,
										733
									],
									[
										916,
										920
									],
									[
										1142,
										1146
									],
									[
										1399,
										1403
									],
									[
										1615,
										1619
									],
									[
										1840,
										1844
									],
									[
										1941,
										1945
									],
									[
										1996,
										2000
									],
									[
										2121,
										2125
									],
									[
										2327,
										2331
									],
									[
										2418,
										2422
									],
									[
										2598,
										2602
									],
									[
										2710,
										2714
									],
									[
										2794,
										2798
									],
									[
										2900,
										2904
									],
									[
										3007,
										3011
									],
									[
										3118,
										3122
									],
									[
										3225,
										3229
									],
									[
										3318,
										3322
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								1159,
								1159
							]
						],
						"settings":
						{
							"default_dir": "/home/will/Documents/git/Breakout",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ 	].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 342.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Effects.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1626,
						"regions":
						{
						},
						"selection":
						[
							[
								705,
								705
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 342.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "include/PhysicsEntity.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 359,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "include/Entity.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 672,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 445.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 466.0
	},
	"pinned_build_system": "Packages/User/Make.sublime-build",
	"project": "breakout.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"stateme",
				"include/StateMachine.h"
			],
			[
				"ball.cpp",
				"src/Ball.cpp"
			],
			[
				"block.h",
				"include/Block.h"
			],
			[
				"block.cpp",
				"src/Block.cpp"
			],
			[
				"entity",
				"include/Entity.h"
			],
			[
				"physics",
				"include/PhysicsEntity.h"
			],
			[
				"ball.h",
				"include/Ball.h"
			],
			[
				"sond.h",
				"include/Sound.h"
			],
			[
				"sound.h",
				"include/Sound.h"
			],
			[
				"makefil",
				"Makefile"
			],
			[
				"main",
				"src/main.cpp"
			],
			[
				"make",
				"Makefile"
			],
			[
				"progr",
				"include/ProgramManager.h"
			],
			[
				"game",
				"include/GameManager.h"
			],
			[
				"padd",
				"src/Paddle.cpp"
			],
			[
				"mak",
				"Makefile"
			],
			[
				"ball",
				"src/Ball.cpp"
			],
			[
				"paddle.cpp",
				"src/Paddle.cpp"
			],
			[
				"block.cp",
				"src/Block.cpp"
			],
			[
				"ini",
				"breakout.ini"
			],
			[
				"global",
				"include/Globals.h"
			],
			[
				"button.c",
				"src/Button.cpp"
			],
			[
				"button.h",
				"include/Button.h"
			],
			[
				"button.cpp",
				"src/Button.cpp"
			],
			[
				"menu",
				"src/MenuManager.cpp"
			],
			[
				"block.",
				"src/Block.cpp"
			],
			[
				"paddl",
				"src/Paddle.cpp"
			],
			[
				"program",
				"include/ProgramManager.h"
			],
			[
				"event",
				"include/EventManager.h"
			],
			[
				"button.cp",
				"src/Button.cpp"
			],
			[
				"button",
				"include/Button.h"
			],
			[
				"balls",
				"src/BallsIndicator.cpp"
			],
			[
				"ballsin",
				"src/BallsIndicator.cpp"
			],
			[
				"eve",
				"src/EventManager.cpp"
			],
			[
				"",
				"src/Ball.h"
			],
			[
				"p",
				"src/Paddle.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 480.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 232.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
