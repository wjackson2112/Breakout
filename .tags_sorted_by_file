!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
BUILD_DIR	Makefile	/^BUILD_DIR = build$/;"	m
CC	Makefile	/^CC = g++$/;"	m
CC_FLAGS	Makefile	/^CC_FLAGS = -w -std=c++11$/;"	m
HDR	Makefile	/^HDR = $(wildcard $(SRC_DIR)\/*.h)$/;"	m
INCLUDES	Makefile	/^INCLUDES = -Iinclude$/;"	m
LD_FLAGS	Makefile	/^LD_FLAGS = -lSDL2 -lSDL2_image -lSDL2_ttf -lopenal -lalut$/;"	m
OBJS	Makefile	/^OBJS = $(patsubst $(SRC_DIR)\/%.cpp,$(BUILD_DIR)\/%.o,$(SRC))$/;"	m
SRC	Makefile	/^SRC = $(wildcard $(SRC_DIR)\/*.cpp)$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = src$/;"	m
TARGET	Makefile	/^TARGET = $(TARGET_NAME)$/;"	m
TARGET_NAME	Makefile	/^TARGET_NAME = breakout$/;"	m
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
ASSET_FACTORY_H	include/AssetFactory.h	2;"	d
AssetFactory	include/AssetFactory.h	/^class AssetFactory {	$/;"	c
gRenderer	include/AssetFactory.h	/^	SDL_Renderer* gRenderer;$/;"	m	class:AssetFactory
getAsset	include/AssetFactory.h	/^	T* getAsset(string key){$/;"	f	class:AssetFactory
sounds	include/AssetFactory.h	/^	unordered_map<string, Sound*> sounds;$/;"	m	class:AssetFactory
textures	include/AssetFactory.h	/^	unordered_map<string, SDL_Texture*> textures;$/;"	m	class:AssetFactory
BALL_H	include/Ball.h	2;"	d
Ball	include/Ball.h	/^class Ball : public PhysicsEntity$/;"	c
BallState	include/Ball.h	/^} BallState;$/;"	t	typeref:enum:__anon4
FLYING_ST	include/Ball.h	/^	FLYING_ST$/;"	e	enum:__anon4
LOST_ST	include/Ball.h	/^	LOST_ST,$/;"	e	enum:__anon4
WAITING_ST	include/Ball.h	/^	WAITING_ST,$/;"	e	enum:__anon4
assetFactory	include/Ball.h	/^	AssetFactory* assetFactory;$/;"	m	class:Ball
blockSound	include/Ball.h	/^	Sound *paddleSound, *blockSound;$/;"	m	class:Ball
height	include/Ball.h	/^	int height = Globals::ballHeight;$/;"	m	class:Ball
max_vel	include/Ball.h	/^	float max_vel = width * 15;$/;"	m	class:Ball
paddle	include/Ball.h	/^	Paddle* paddle;$/;"	m	class:Ball
paddleSound	include/Ball.h	/^	Sound *paddleSound, *blockSound;$/;"	m	class:Ball
state	include/Ball.h	/^	StateMachine<BallState>* state;$/;"	m	class:Ball
texture	include/Ball.h	/^	SDL_Texture* texture;$/;"	m	class:Ball
width	include/Ball.h	/^	int width = Globals::ballWidth;$/;"	m	class:Ball
BALLS_INDICATOR_H	include/BallsIndicator.h	2;"	d
BallsIndicator	include/BallsIndicator.h	/^class BallsIndicator : public UIEntity$/;"	c
assetFactory	include/BallsIndicator.h	/^	AssetFactory* assetFactory;$/;"	m	class:BallsIndicator
ballsRemaining	include/BallsIndicator.h	/^	int ballsRemaining;$/;"	m	class:BallsIndicator
gapWidth	include/BallsIndicator.h	/^	int gapWidth = Globals::ballWidth \/ 2;$/;"	m	class:BallsIndicator
texture	include/BallsIndicator.h	/^	SDL_Texture* texture;$/;"	m	class:BallsIndicator
BLOCK_H	include/Block.h	2;"	d
BLUE	include/Block.h	/^	BLUE,$/;"	e	enum:__anon3
Block	include/Block.h	/^class Block : public PhysicsEntity$/;"	c
BlockColor	include/Block.h	/^} BlockColor;$/;"	t	typeref:enum:__anon3
BlockState	include/Block.h	/^} BlockState;$/;"	t	typeref:enum:__anon2
FADING_ST	include/Block.h	/^	FADING_ST,$/;"	e	enum:__anon2
GONE_ST	include/Block.h	/^	GONE_ST$/;"	e	enum:__anon2
GREEN	include/Block.h	/^	GREEN,$/;"	e	enum:__anon3
IDLE_ST	include/Block.h	/^	IDLE_ST,$/;"	e	enum:__anon2
ORANGE	include/Block.h	/^	ORANGE,$/;"	e	enum:__anon3
PURPLE	include/Block.h	/^	PURPLE$/;"	e	enum:__anon3
RED	include/Block.h	/^	RED,$/;"	e	enum:__anon3
YELLOW	include/Block.h	/^	YELLOW,$/;"	e	enum:__anon3
assetFactory	include/Block.h	/^	AssetFactory* assetFactory;$/;"	m	class:Block
b	include/Block.h	/^	int r, g, b;$/;"	m	class:Block
effects	include/Block.h	/^	Effects* effects;$/;"	m	class:Block
g	include/Block.h	/^	int r, g, b;$/;"	m	class:Block
height	include/Block.h	/^	int height = 40.0;$/;"	m	class:Block
r	include/Block.h	/^	int r, g, b;$/;"	m	class:Block
state	include/Block.h	/^	StateMachine<BlockState>* state;$/;"	m	class:Block
texture	include/Block.h	/^	SDL_Texture* texture;$/;"	m	class:Block
width	include/Block.h	/^	int width = 80.0;$/;"	m	class:Block
BUTTON_H	include/Button.h	2;"	d
Button	include/Button.h	/^class Button : public MenuEntity$/;"	c
b	include/Button.h	/^	int r, g, b;$/;"	m	class:Button
event	include/Button.h	/^	GameEvent event;$/;"	m	class:Button
font	include/Button.h	/^	TTF_Font* font;$/;"	m	class:Button
g	include/Button.h	/^	int r, g, b;$/;"	m	class:Button
lastState	include/Button.h	/^	bool lastState = false;$/;"	m	class:Button
r	include/Button.h	/^	int r, g, b;$/;"	m	class:Button
text	include/Button.h	/^	const char* text;$/;"	m	class:Button
COLLIDER_H	include/Collider.h	2;"	d
Collider	include/Collider.h	/^class Collider : public PhysicsEntity$/;"	c
Boolean	include/ConvertUTF.h	/^typedef unsigned char	Boolean; \/* 0 or 1 *\/$/;"	t
ConversionFlags	include/ConvertUTF.h	/^} ConversionFlags;$/;"	t	typeref:enum:__anon6
ConversionResult	include/ConvertUTF.h	/^} ConversionResult;$/;"	t	typeref:enum:__anon5
UNI_MAX_BMP	include/ConvertUTF.h	97;"	d
UNI_MAX_LEGAL_UTF32	include/ConvertUTF.h	100;"	d
UNI_MAX_UTF16	include/ConvertUTF.h	98;"	d
UNI_MAX_UTF32	include/ConvertUTF.h	99;"	d
UNI_REPLACEMENT_CHAR	include/ConvertUTF.h	96;"	d
UTF16	include/ConvertUTF.h	/^typedef unsigned short	UTF16;	\/* at least 16 bits *\/$/;"	t
UTF32	include/ConvertUTF.h	/^typedef unsigned int	UTF32;	\/* at least 32 bits *\/$/;"	t
UTF8	include/ConvertUTF.h	/^typedef unsigned char	UTF8;	\/* typically 8 bits *\/$/;"	t
conversionOK	include/ConvertUTF.h	/^	conversionOK, 		\/* conversion successful *\/$/;"	e	enum:__anon5
lenientConversion	include/ConvertUTF.h	/^	lenientConversion$/;"	e	enum:__anon6
sourceExhausted	include/ConvertUTF.h	/^	sourceExhausted,	\/* partial character in source, but hit end *\/$/;"	e	enum:__anon5
sourceIllegal	include/ConvertUTF.h	/^	sourceIllegal		\/* source sequence is illegal\/malformed *\/$/;"	e	enum:__anon5
strictConversion	include/ConvertUTF.h	/^	strictConversion = 0,$/;"	e	enum:__anon6
targetExhausted	include/ConvertUTF.h	/^	targetExhausted,	\/* insuff. room in target for conversion *\/$/;"	e	enum:__anon5
AlphaKeyFrame	include/Effects.h	/^		AlphaKeyFrame(Uint64 transitionTime, int start_a, int final_a)$/;"	f	class:Effects::AlphaKeyFrame
AlphaKeyFrame	include/Effects.h	/^	class AlphaKeyFrame$/;"	c	class:Effects
ColorKeyFrame	include/Effects.h	/^		ColorKeyFrame(Uint32 completionTime, int r, int g, int b){$/;"	f	class:Effects::ColorKeyFrame
ColorKeyFrame	include/Effects.h	/^	class ColorKeyFrame$/;"	c	class:Effects
EFFECTS_H	include/Effects.h	2;"	d
Effects	include/Effects.h	/^class Effects$/;"	c
EffectsCB	include/Effects.h	/^	typedef std::function<void(void)> EffectsCB;$/;"	t	class:Effects
a	include/Effects.h	/^	Uint8 r, g, b, a;$/;"	m	class:Effects
alphaCB	include/Effects.h	/^	EffectsCB alphaCB, colorCB;$/;"	m	class:Effects
alphaFrames	include/Effects.h	/^	vector<AlphaKeyFrame*> alphaFrames;$/;"	m	class:Effects
b	include/Effects.h	/^		Uint8 r, g, b;$/;"	m	class:Effects::ColorKeyFrame
b	include/Effects.h	/^	Uint8 r, g, b, a;$/;"	m	class:Effects
colorCB	include/Effects.h	/^	EffectsCB alphaCB, colorCB;$/;"	m	class:Effects
colorFrames	include/Effects.h	/^	vector<ColorKeyFrame*> colorFrames;$/;"	m	class:Effects
elapsedTime	include/Effects.h	/^		Uint64 transitionTime, elapsedTime;$/;"	m	class:Effects::ColorKeyFrame
elapsedTime	include/Effects.h	/^		double transitionTime, elapsedTime;$/;"	m	class:Effects::AlphaKeyFrame
final_a	include/Effects.h	/^		Uint8 final_a;$/;"	m	class:Effects::AlphaKeyFrame
frameComplete	include/Effects.h	/^		bool frameComplete()$/;"	f	class:Effects::AlphaKeyFrame
frameComplete	include/Effects.h	/^		bool frameComplete()$/;"	f	class:Effects::ColorKeyFrame
frameTimer	include/Effects.h	/^	SDL_TimerID frameTimer;$/;"	m	class:Effects
g	include/Effects.h	/^		Uint8 r, g, b;$/;"	m	class:Effects::ColorKeyFrame
g	include/Effects.h	/^	Uint8 r, g, b, a;$/;"	m	class:Effects
orig_a	include/Effects.h	/^	Uint8 orig_r, orig_g, orig_b, orig_a;$/;"	m	class:Effects
orig_b	include/Effects.h	/^	Uint8 orig_r, orig_g, orig_b, orig_a;$/;"	m	class:Effects
orig_g	include/Effects.h	/^	Uint8 orig_r, orig_g, orig_b, orig_a;$/;"	m	class:Effects
orig_r	include/Effects.h	/^	Uint8 orig_r, orig_g, orig_b, orig_a;$/;"	m	class:Effects
prevTime	include/Effects.h	/^	Uint64 prevTime;$/;"	m	class:Effects
r	include/Effects.h	/^		Uint8 r, g, b;$/;"	m	class:Effects::ColorKeyFrame
r	include/Effects.h	/^	Uint8 r, g, b, a;$/;"	m	class:Effects
start_a	include/Effects.h	/^		Uint8 start_a;$/;"	m	class:Effects::AlphaKeyFrame
start_b	include/Effects.h	/^		Uint8 start_r, start_g, start_b;$/;"	m	class:Effects::ColorKeyFrame
start_g	include/Effects.h	/^		Uint8 start_r, start_g, start_b;$/;"	m	class:Effects::ColorKeyFrame
start_r	include/Effects.h	/^		Uint8 start_r, start_g, start_b;$/;"	m	class:Effects::ColorKeyFrame
texture	include/Effects.h	/^	SDL_Texture* texture;$/;"	m	class:Effects
transitionTime	include/Effects.h	/^		Uint64 transitionTime, elapsedTime;$/;"	m	class:Effects::ColorKeyFrame
transitionTime	include/Effects.h	/^		double transitionTime, elapsedTime;$/;"	m	class:Effects::AlphaKeyFrame
update	include/Effects.h	/^		void update(Uint64 elapsedTime, Uint8& r, Uint8& g, Uint8& b){$/;"	f	class:Effects::ColorKeyFrame
update	include/Effects.h	/^		void update(double elapsedTime, Uint8& a){$/;"	f	class:Effects::AlphaKeyFrame
ENTITY_H	include/Entity.h	2;"	d
Entity	include/Entity.h	/^class Entity : public IEventHandler$/;"	c
height	include/Entity.h	/^	int width, height;$/;"	m	class:Entity
posX	include/Entity.h	/^	float posX, posY;$/;"	m	class:Entity
posY	include/Entity.h	/^	float posX, posY;$/;"	m	class:Entity
width	include/Entity.h	/^	int width, height;$/;"	m	class:Entity
BALLS_DEPLETED	include/EventManager.h	/^	BALLS_DEPLETED,$/;"	e	enum:GameEvent
BALL_ADDED	include/EventManager.h	/^	BALL_ADDED,$/;"	e	enum:GameEvent
BALL_LOST	include/EventManager.h	/^	BALL_LOST,$/;"	e	enum:GameEvent
BLOCK_DISAPPEARED	include/EventManager.h	/^	BLOCK_DISAPPEARED = 0,$/;"	e	enum:GameEvent
CREDITS	include/EventManager.h	/^	CREDITS,$/;"	e	enum:GameEvent
EVENT_MANAGER_H	include/EventManager.h	2;"	d
EventManager	include/EventManager.h	/^class EventManager$/;"	c
GameEvent	include/EventManager.h	/^typedef enum GameEvent$/;"	g
GameEvent	include/EventManager.h	/^} GameEvent;$/;"	t	typeref:enum:GameEvent
GameEventStr	include/EventManager.h	/^static char* GameEventStr[NUM_OF_EVENTS] =$/;"	v
NEW_GAME	include/EventManager.h	/^	NEW_GAME,$/;"	e	enum:GameEvent
NUM_OF_EVENTS	include/EventManager.h	/^	NUM_OF_EVENTS$/;"	e	enum:GameEvent
OPTIONS	include/EventManager.h	/^	OPTIONS,$/;"	e	enum:GameEvent
PAUSE_GAME	include/EventManager.h	/^	PAUSE_GAME,$/;"	e	enum:GameEvent
QUIT_GAME	include/EventManager.h	/^	QUIT_GAME,$/;"	e	enum:GameEvent
QUIT_PROGRAM	include/EventManager.h	/^	QUIT_PROGRAM,$/;"	e	enum:GameEvent
RESUME_GAME	include/EventManager.h	/^	RESUME_GAME,$/;"	e	enum:GameEvent
e	include/EventManager.h	/^	SDL_Event e;$/;"	m	class:EventManager
eventHandlers	include/EventManager.h	/^	std::vector<IEventHandler*> eventHandlers;$/;"	m	class:EventManager
gameEvents	include/EventManager.h	/^	Uint8 gameEvents[NUM_OF_EVENTS] = {{0}};$/;"	m	class:EventManager
instance	include/EventManager.h	/^	static EventManager* instance;$/;"	m	class:EventManager
instanceFlag	include/EventManager.h	/^	static bool instanceFlag;$/;"	m	class:EventManager
GAME_MANAGER_H	include/GameManager.h	2;"	d
GameManager	include/GameManager.h	/^class GameManager : public IEventHandler$/;"	c
assetFactory	include/GameManager.h	/^	AssetFactory* assetFactory;$/;"	m	class:GameManager
blockCount	include/GameManager.h	/^	int blockCount;$/;"	m	class:GameManager
pause	include/GameManager.h	/^	bool pause, visible;$/;"	m	class:GameManager
physicsEntities	include/GameManager.h	/^	std::vector<PhysicsEntity*> physicsEntities;$/;"	m	class:GameManager
uiEntities	include/GameManager.h	/^	std::vector<UIEntity*> uiEntities;$/;"	m	class:GameManager
visible	include/GameManager.h	/^	bool pause, visible;$/;"	m	class:GameManager
DEF_FULL_SCREEN	include/Globals.h	26;"	d
DEF_SCREEN_HEIGHT	include/Globals.h	25;"	d
DEF_SCREEN_WIDTH	include/Globals.h	24;"	d
GLOBALS_H	include/Globals.h	2;"	d
Globals	include/Globals.h	/^namespace Globals$/;"	n
IEVENT_HANDLER_H	include/IEventHandler.h	2;"	d
IEventHandler	include/IEventHandler.h	/^class IEventHandler$/;"	c
MENU_ENTITY_H	include/MenuEntity.h	2;"	d
MenuEntity	include/MenuEntity.h	/^class MenuEntity : public Entity$/;"	c
size	include/MenuEntity.h	/^	SDL_Rect size;$/;"	m	class:MenuEntity
MENU_MANAGER_H	include/MenuManager.h	2;"	d
MenuManager	include/MenuManager.h	/^class MenuManager : public IEventHandler$/;"	c
uiEntities	include/MenuManager.h	/^	std::vector<UIEntity*> uiEntities;$/;"	m	class:MenuManager
visible	include/MenuManager.h	/^	bool visible;$/;"	m	class:MenuManager
PADDLE_H	include/Paddle.h	2;"	d
Paddle	include/Paddle.h	/^class Paddle : public PhysicsEntity$/;"	c
PaddleState	include/Paddle.h	/^} PaddleState;$/;"	t	typeref:enum:__anon1
accel	include/Paddle.h	/^	int accel = max_vel * 5;$/;"	m	class:Paddle
accelX	include/Paddle.h	/^	float accelX, accelY;$/;"	m	class:Paddle
accelY	include/Paddle.h	/^	float accelX, accelY;$/;"	m	class:Paddle
assetFactory	include/Paddle.h	/^	AssetFactory* assetFactory;$/;"	m	class:Paddle
height	include/Paddle.h	/^	int height = Globals::paddleHeight;$/;"	m	class:Paddle
max_vel	include/Paddle.h	/^	float max_vel = width * 2.5;$/;"	m	class:Paddle
state	include/Paddle.h	/^	StateMachine<PaddleState>* state;$/;"	m	class:Paddle
texture	include/Paddle.h	/^	SDL_Texture* texture;$/;"	m	class:Paddle
width	include/Paddle.h	/^	int width = Globals::paddleWidth;$/;"	m	class:Paddle
PAUSE_MENU_MANAGER_H	include/PauseMenuManager.h	2;"	d
PauseMenuManager	include/PauseMenuManager.h	/^class PauseMenuManager : public MenuManager$/;"	c
quit	include/PauseMenuManager.h	/^	bool quit;$/;"	m	class:PauseMenuManager
uiEntities	include/PauseMenuManager.h	/^	std::vector<UIEntity*> uiEntities;$/;"	m	class:PauseMenuManager
PHYSICS_ENTITY_H	include/PhysicsEntity.h	2;"	d
PhysicsEntity	include/PhysicsEntity.h	/^class PhysicsEntity : public Entity$/;"	c
max_vel	include/PhysicsEntity.h	/^	float max_vel = 200;$/;"	m	class:PhysicsEntity
velX	include/PhysicsEntity.h	/^	float velX, velY;$/;"	m	class:PhysicsEntity
velY	include/PhysicsEntity.h	/^	float velX, velY;$/;"	m	class:PhysicsEntity
GAME	include/ProgramManager.h	/^	GAME$/;"	e	enum:ProgramManagerState
MENU	include/ProgramManager.h	/^	MENU,$/;"	e	enum:ProgramManagerState
PROGRAM_MANAGER_H	include/ProgramManager.h	2;"	d
ProgramManager	include/ProgramManager.h	/^class ProgramManager : public IEventHandler$/;"	c
ProgramManagerState	include/ProgramManager.h	/^typedef enum ProgramManagerState$/;"	g
ProgramManagerState	include/ProgramManager.h	/^} ProgramManagerState;$/;"	t	typeref:enum:ProgramManagerState
assetFactory	include/ProgramManager.h	/^	AssetFactory* assetFactory;$/;"	m	class:ProgramManager
gRenderer	include/ProgramManager.h	/^	SDL_Renderer* gRenderer;$/;"	m	class:ProgramManager
gameManager	include/ProgramManager.h	/^	GameManager* gameManager;$/;"	m	class:ProgramManager
machineState	include/ProgramManager.h	/^	ProgramManagerState machineState;$/;"	m	class:ProgramManager
menuManager	include/ProgramManager.h	/^	MenuManager* menuManager;$/;"	m	class:ProgramManager
quit	include/ProgramManager.h	/^	bool quit;$/;"	m	class:ProgramManager
AddEntry	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::AddEntry($/;"	f	class:CSimpleIniTempl
CSimpleIni	include/SimpleIni.h	3423;"	d
CSimpleIni	include/SimpleIni.h	3427;"	d
CSimpleIniA	include/SimpleIni.h	/^    SI_NoCase<char>,SI_ConvertA<char> >                 CSimpleIniA;$/;"	t
CSimpleIniCase	include/SimpleIni.h	3424;"	d
CSimpleIniCase	include/SimpleIni.h	3428;"	d
CSimpleIniCaseA	include/SimpleIni.h	/^    SI_Case<char>,SI_ConvertA<char> >                   CSimpleIniCaseA;$/;"	t
CSimpleIniCaseW	include/SimpleIni.h	/^    SI_Case<UChar>,SI_ConvertW<UChar> >                 CSimpleIniCaseW;$/;"	t
CSimpleIniCaseW	include/SimpleIni.h	/^    SI_Case<wchar_t>,SI_ConvertW<wchar_t> >             CSimpleIniCaseW;$/;"	t
CSimpleIniTempl	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::CSimpleIniTempl($/;"	f	class:CSimpleIniTempl
CSimpleIniTempl	include/SimpleIni.h	/^class CSimpleIniTempl$/;"	c
CSimpleIniW	include/SimpleIni.h	/^    SI_NoCase<UChar>,SI_ConvertW<UChar> >               CSimpleIniW;$/;"	t
CSimpleIniW	include/SimpleIni.h	/^    SI_NoCase<wchar_t>,SI_ConvertW<wchar_t> >           CSimpleIniW;$/;"	t
ConvertFromStore	include/SimpleIni.h	/^    bool ConvertFromStore($/;"	f	class:SI_ConvertA
ConvertFromStore	include/SimpleIni.h	/^    bool ConvertFromStore($/;"	f	class:SI_ConvertW
ConvertToStore	include/SimpleIni.h	/^        bool ConvertToStore(const SI_CHAR * a_pszString) {$/;"	f	class:CSimpleIniTempl::Converter
ConvertToStore	include/SimpleIni.h	/^    bool ConvertToStore($/;"	f	class:SI_ConvertA
ConvertToStore	include/SimpleIni.h	/^    bool ConvertToStore($/;"	f	class:SI_ConvertW
Converter	include/SimpleIni.h	/^        Converter(bool a_bStoreIsUtf8) : SI_CONVERTER(a_bStoreIsUtf8) {$/;"	f	class:CSimpleIniTempl::Converter
Converter	include/SimpleIni.h	/^        Converter(const Converter & rhs) { operator=(rhs); }$/;"	f	class:CSimpleIniTempl::Converter
Converter	include/SimpleIni.h	/^    class Converter : private SI_CONVERTER {$/;"	c	class:CSimpleIniTempl
CopyString	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::CopyString($/;"	f	class:CSimpleIniTempl
Data	include/SimpleIni.h	/^        const char * Data() { return m_scratch.data(); }$/;"	f	class:CSimpleIniTempl::Converter
Delete	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::Delete($/;"	f	class:CSimpleIniTempl
DeleteString	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::DeleteString($/;"	f	class:CSimpleIniTempl
DeleteValue	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::DeleteValue($/;"	f	class:CSimpleIniTempl
Entry	include/SimpleIni.h	/^        Entry(const Entry & rhs) { operator=(rhs); }$/;"	f	struct:CSimpleIniTempl::Entry
Entry	include/SimpleIni.h	/^        Entry(const SI_CHAR * a_pszItem = NULL, int a_nOrder = 0)$/;"	f	struct:CSimpleIniTempl::Entry
Entry	include/SimpleIni.h	/^        Entry(const SI_CHAR * a_pszItem, const SI_CHAR * a_pszComment, int a_nOrder)$/;"	f	struct:CSimpleIniTempl::Entry
Entry	include/SimpleIni.h	/^    struct Entry {$/;"	s	class:CSimpleIniTempl
FileWriter	include/SimpleIni.h	/^        FileWriter(FILE * a_file) : m_file(a_file) { }$/;"	f	class:CSimpleIniTempl::FileWriter
FileWriter	include/SimpleIni.h	/^    class FileWriter : public OutputWriter {$/;"	c	class:CSimpleIniTempl
FindEntry	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::FindEntry($/;"	f	class:CSimpleIniTempl
FindFileComment	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::FindFileComment($/;"	f	class:CSimpleIniTempl
GetAllKeys	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetAllKeys($/;"	f	class:CSimpleIniTempl
GetAllSections	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetAllSections($/;"	f	class:CSimpleIniTempl
GetAllValues	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetAllValues($/;"	f	class:CSimpleIniTempl
GetBoolValue	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetBoolValue($/;"	f	class:CSimpleIniTempl
GetConverter	include/SimpleIni.h	/^    Converter GetConverter() const {$/;"	f	class:CSimpleIniTempl
GetDoubleValue	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetDoubleValue($/;"	f	class:CSimpleIniTempl
GetLongValue	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetLongValue($/;"	f	class:CSimpleIniTempl
GetSection	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetSection($/;"	f	class:CSimpleIniTempl
GetSectionSize	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetSectionSize($/;"	f	class:CSimpleIniTempl
GetValue	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetValue($/;"	f	class:CSimpleIniTempl
INCLUDED_SimpleIni_h	include/SimpleIni.h	196;"	d
IsComment	include/SimpleIni.h	/^    inline bool IsComment(SI_CHAR ch) const {$/;"	f	class:CSimpleIniTempl
IsEmpty	include/SimpleIni.h	/^    bool IsEmpty() const { return m_data.empty(); }$/;"	f	class:CSimpleIniTempl
IsLess	include/SimpleIni.h	/^    bool IsLess(const SI_CHAR * a_pLeft, const SI_CHAR * a_pRight) const {$/;"	f	class:CSimpleIniTempl
IsMultiKey	include/SimpleIni.h	/^    bool IsMultiKey() const { return m_bAllowMultiKey; }$/;"	f	class:CSimpleIniTempl
IsMultiLine	include/SimpleIni.h	/^    bool IsMultiLine() const { return m_bAllowMultiLine; }$/;"	f	class:CSimpleIniTempl
IsMultiLineData	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::IsMultiLineData($/;"	f	class:CSimpleIniTempl
IsMultiLineTag	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::IsMultiLineTag($/;"	f	class:CSimpleIniTempl
IsNewLineChar	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::IsNewLineChar($/;"	f	class:CSimpleIniTempl
IsSpace	include/SimpleIni.h	/^    inline bool IsSpace(SI_CHAR ch) const {$/;"	f	class:CSimpleIniTempl
IsUnicode	include/SimpleIni.h	/^    bool IsUnicode() const { return m_bStoreIsUtf8; }$/;"	f	class:CSimpleIniTempl
KeyOrder	include/SimpleIni.h	/^        struct KeyOrder : std::binary_function<Entry, Entry, bool> {$/;"	s	struct:CSimpleIniTempl::Entry
LoadData	include/SimpleIni.h	/^    SI_Error LoadData(const std::string & a_strData) {$/;"	f	class:CSimpleIniTempl
LoadData	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadData($/;"	f	class:CSimpleIniTempl
LoadFile	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadFile($/;"	f	class:CSimpleIniTempl
LoadMultiLineText	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadMultiLineText($/;"	f	class:CSimpleIniTempl
LoadOrder	include/SimpleIni.h	/^        struct LoadOrder : std::binary_function<Entry, Entry, bool> {$/;"	s	struct:CSimpleIniTempl::Entry
OutputMultiLineText	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::OutputMultiLineText($/;"	f	class:CSimpleIniTempl
OutputWriter	include/SimpleIni.h	/^        OutputWriter() { }$/;"	f	class:CSimpleIniTempl::OutputWriter
OutputWriter	include/SimpleIni.h	/^    class OutputWriter {$/;"	c	class:CSimpleIniTempl
Reset	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::Reset()$/;"	f	class:CSimpleIniTempl
SI_ASSERT	include/SimpleIni.h	232;"	d
SI_ASSERT	include/SimpleIni.h	234;"	d
SI_CHAR_T	include/SimpleIni.h	/^    typedef SI_CHAR SI_CHAR_T;$/;"	t	class:CSimpleIniTempl
SI_CONVERT_GENERIC	include/SimpleIni.h	2675;"	d
SI_CONVERT_WIN32	include/SimpleIni.h	2673;"	d
SI_Case	include/SimpleIni.h	2843;"	d
SI_Case	include/SimpleIni.h	3051;"	d
SI_Case	include/SimpleIni.h	3239;"	d
SI_ConvertA	include/SimpleIni.h	/^    SI_ConvertA() { }$/;"	f	class:SI_ConvertA
SI_ConvertA	include/SimpleIni.h	/^    SI_ConvertA(bool a_bStoreIsUtf8) : m_bStoreIsUtf8(a_bStoreIsUtf8) { }$/;"	f	class:SI_ConvertA
SI_ConvertA	include/SimpleIni.h	/^    SI_ConvertA(const SI_ConvertA & rhs) { operator=(rhs); }$/;"	f	class:SI_ConvertA
SI_ConvertA	include/SimpleIni.h	/^class SI_ConvertA {$/;"	c
SI_ConvertW	include/SimpleIni.h	/^    SI_ConvertW() : m_pEncoding(NULL), m_pConverter(NULL) { }$/;"	f	class:SI_ConvertW
SI_ConvertW	include/SimpleIni.h	/^    SI_ConvertW() { }$/;"	f	class:SI_ConvertW
SI_ConvertW	include/SimpleIni.h	/^    SI_ConvertW(bool a_bStoreIsUtf8) : m_bStoreIsUtf8(a_bStoreIsUtf8) { }$/;"	f	class:SI_ConvertW
SI_ConvertW	include/SimpleIni.h	/^    SI_ConvertW(bool a_bStoreIsUtf8) : m_pConverter(NULL) {$/;"	f	class:SI_ConvertW
SI_ConvertW	include/SimpleIni.h	/^    SI_ConvertW(bool a_bStoreIsUtf8) {$/;"	f	class:SI_ConvertW
SI_ConvertW	include/SimpleIni.h	/^    SI_ConvertW(const SI_ConvertW & rhs) { operator=(rhs); }$/;"	f	class:SI_ConvertW
SI_ConvertW	include/SimpleIni.h	/^class SI_ConvertW {$/;"	c
SI_Error	include/SimpleIni.h	/^enum SI_Error {$/;"	g
SI_FAIL	include/SimpleIni.h	/^    SI_FAIL     = -1,   \/\/!< Generic failure$/;"	e	enum:SI_Error
SI_FILE	include/SimpleIni.h	/^    SI_FILE     = -3    \/\/!< File error (see errno for detail error)$/;"	e	enum:SI_Error
SI_GenericCase	include/SimpleIni.h	/^struct SI_GenericCase {$/;"	s
SI_GenericNoCase	include/SimpleIni.h	/^struct SI_GenericNoCase {$/;"	s
SI_HAS_WIDE_FILE	include/SimpleIni.h	263;"	d
SI_HAS_WIDE_FILE	include/SimpleIni.h	266;"	d
SI_INSERTED	include/SimpleIni.h	/^    SI_INSERTED =  2,   \/\/!< A new value was inserted$/;"	e	enum:SI_Error
SI_NEWLINE	include/SimpleIni.h	3425;"	d
SI_NEWLINE	include/SimpleIni.h	3429;"	d
SI_NEWLINE_A	include/SimpleIni.h	251;"	d
SI_NEWLINE_A	include/SimpleIni.h	254;"	d
SI_NEWLINE_W	include/SimpleIni.h	252;"	d
SI_NEWLINE_W	include/SimpleIni.h	255;"	d
SI_NOMEM	include/SimpleIni.h	/^    SI_NOMEM    = -2,   \/\/!< Out of memory error$/;"	e	enum:SI_Error
SI_NO_MBCS	include/SimpleIni.h	3244;"	d
SI_NoCase	include/SimpleIni.h	/^struct SI_NoCase {$/;"	s
SI_NoCase	include/SimpleIni.h	2844;"	d
SI_NoCase	include/SimpleIni.h	3052;"	d
SI_NoCase	include/SimpleIni.h	3250;"	d
SI_OK	include/SimpleIni.h	/^    SI_OK       =  0,   \/\/!< No error$/;"	e	enum:SI_Error
SI_UPDATED	include/SimpleIni.h	/^    SI_UPDATED  =  1,   \/\/!< An existing value was updated$/;"	e	enum:SI_Error
SI_UTF8_SIGNATURE	include/SimpleIni.h	248;"	d
SI_WCHAR_T	include/SimpleIni.h	264;"	d
SI_WCHAR_T	include/SimpleIni.h	267;"	d
Save	include/SimpleIni.h	/^    SI_Error Save($/;"	f	class:CSimpleIniTempl
Save	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::Save($/;"	f	class:CSimpleIniTempl
SaveFile	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SaveFile($/;"	f	class:CSimpleIniTempl
SetBoolValue	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SetBoolValue($/;"	f	class:CSimpleIniTempl
SetDoubleValue	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SetDoubleValue($/;"	f	class:CSimpleIniTempl
SetLongValue	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SetLongValue($/;"	f	class:CSimpleIniTempl
SetMultiKey	include/SimpleIni.h	/^    void SetMultiKey(bool a_bAllowMultiKey = true) {$/;"	f	class:CSimpleIniTempl
SetMultiLine	include/SimpleIni.h	/^    void SetMultiLine(bool a_bAllowMultiLine = true) {$/;"	f	class:CSimpleIniTempl
SetSpaces	include/SimpleIni.h	/^    void SetSpaces(bool a_bSpaces = true) {$/;"	f	class:CSimpleIniTempl
SetUnicode	include/SimpleIni.h	/^    void SetUnicode(bool a_bIsUtf8 = true) {$/;"	f	class:CSimpleIniTempl
SetValue	include/SimpleIni.h	/^    SI_Error SetValue($/;"	f	class:CSimpleIniTempl
SizeFromStore	include/SimpleIni.h	/^    size_t SizeFromStore($/;"	f	class:SI_ConvertA
SizeFromStore	include/SimpleIni.h	/^    size_t SizeFromStore($/;"	f	class:SI_ConvertW
SizeToStore	include/SimpleIni.h	/^    size_t SizeToStore($/;"	f	class:SI_ConvertA
SizeToStore	include/SimpleIni.h	/^    size_t SizeToStore($/;"	f	class:SI_ConvertW
SkipNewLine	include/SimpleIni.h	/^    inline void SkipNewLine(SI_CHAR *& a_pData) const {$/;"	f	class:CSimpleIniTempl
StreamWriter	include/SimpleIni.h	/^        StreamWriter(std::ostream & a_ostream) : m_ostream(a_ostream) { }$/;"	f	class:CSimpleIniTempl::StreamWriter
StreamWriter	include/SimpleIni.h	/^    class StreamWriter : public OutputWriter {$/;"	c	class:CSimpleIniTempl
StringWriter	include/SimpleIni.h	/^        StringWriter(std::string & a_string) : m_string(a_string) { }$/;"	f	class:CSimpleIniTempl::StringWriter
StringWriter	include/SimpleIni.h	/^    class StringWriter : public OutputWriter {$/;"	c	class:CSimpleIniTempl
TKeyVal	include/SimpleIni.h	/^    typedef std::multimap<Entry,const SI_CHAR *,typename Entry::KeyOrder> TKeyVal;$/;"	t	class:CSimpleIniTempl
TNamesDepend	include/SimpleIni.h	/^    typedef std::list<Entry> TNamesDepend;$/;"	t	class:CSimpleIniTempl
TSection	include/SimpleIni.h	/^    typedef std::map<Entry,TKeyVal,typename Entry::KeyOrder> TSection;$/;"	t	class:CSimpleIniTempl
UsingSpaces	include/SimpleIni.h	/^    bool UsingSpaces() const { return m_bSpaces; }$/;"	f	class:CSimpleIniTempl
Write	include/SimpleIni.h	/^        void Write(const char * a_pBuf) {$/;"	f	class:CSimpleIniTempl::FileWriter
Write	include/SimpleIni.h	/^        void Write(const char * a_pBuf) {$/;"	f	class:CSimpleIniTempl::StreamWriter
Write	include/SimpleIni.h	/^        void Write(const char * a_pBuf) {$/;"	f	class:CSimpleIniTempl::StringWriter
locase	include/SimpleIni.h	/^    inline SI_CHAR locase(SI_CHAR ch) const {$/;"	f	struct:SI_GenericNoCase
m_bAllowMultiKey	include/SimpleIni.h	/^    bool m_bAllowMultiKey;$/;"	m	class:CSimpleIniTempl
m_bAllowMultiLine	include/SimpleIni.h	/^    bool m_bAllowMultiLine;$/;"	m	class:CSimpleIniTempl
m_bSpaces	include/SimpleIni.h	/^    bool m_bSpaces;$/;"	m	class:CSimpleIniTempl
m_bStoreIsUtf8	include/SimpleIni.h	/^    bool m_bStoreIsUtf8;$/;"	m	class:CSimpleIniTempl
m_bStoreIsUtf8	include/SimpleIni.h	/^    bool m_bStoreIsUtf8;$/;"	m	class:SI_ConvertA
m_bStoreIsUtf8	include/SimpleIni.h	/^    bool m_bStoreIsUtf8;$/;"	m	class:SI_ConvertW
m_data	include/SimpleIni.h	/^    TSection m_data;$/;"	m	class:CSimpleIniTempl
m_file	include/SimpleIni.h	/^        FILE * m_file;$/;"	m	class:CSimpleIniTempl::FileWriter
m_nOrder	include/SimpleIni.h	/^    int m_nOrder;$/;"	m	class:CSimpleIniTempl
m_ostream	include/SimpleIni.h	/^        std::ostream & m_ostream;$/;"	m	class:CSimpleIniTempl::StreamWriter
m_pConverter	include/SimpleIni.h	/^    UConverter * m_pConverter;$/;"	m	class:SI_ConvertW
m_pData	include/SimpleIni.h	/^    SI_CHAR * m_pData;$/;"	m	class:CSimpleIniTempl
m_pEncoding	include/SimpleIni.h	/^    const char * m_pEncoding;$/;"	m	class:SI_ConvertW
m_pFileComment	include/SimpleIni.h	/^    const SI_CHAR * m_pFileComment;$/;"	m	class:CSimpleIniTempl
m_scratch	include/SimpleIni.h	/^        std::string m_scratch;$/;"	m	class:CSimpleIniTempl::Converter
m_string	include/SimpleIni.h	/^        std::string & m_string;$/;"	m	class:CSimpleIniTempl::StringWriter
m_strings	include/SimpleIni.h	/^    TNamesDepend m_strings;$/;"	m	class:CSimpleIniTempl
m_uCodePage	include/SimpleIni.h	/^    UINT m_uCodePage;$/;"	m	class:SI_ConvertW
m_uDataLen	include/SimpleIni.h	/^    size_t m_uDataLen;$/;"	m	class:CSimpleIniTempl
nOrder	include/SimpleIni.h	/^        int             nOrder;$/;"	m	struct:CSimpleIniTempl::Entry
operator ()	include/SimpleIni.h	/^            bool operator()(const Entry & lhs, const Entry & rhs) const {$/;"	f	struct:CSimpleIniTempl::Entry::KeyOrder
operator ()	include/SimpleIni.h	/^            bool operator()(const Entry & lhs, const Entry & rhs) const {$/;"	f	struct:CSimpleIniTempl::Entry::LoadOrder
operator ()	include/SimpleIni.h	/^    bool operator()(const SI_CHAR * pLeft, const SI_CHAR * pRight) const {$/;"	f	struct:SI_GenericCase
operator ()	include/SimpleIni.h	/^    bool operator()(const SI_CHAR * pLeft, const SI_CHAR * pRight) const {$/;"	f	struct:SI_GenericNoCase
operator ()	include/SimpleIni.h	/^    bool operator()(const SI_CHAR * pLeft, const SI_CHAR * pRight) const {$/;"	f	struct:SI_NoCase
operator <	include/SimpleIni.h	/^        bool operator<(const Entry & rhs) const { return LoadOrder()(*this, rhs); }$/;"	f	struct:CSimpleIniTempl::Entry
operator =	include/SimpleIni.h	/^        Converter & operator=(const Converter & rhs) {$/;"	f	class:CSimpleIniTempl::Converter
operator =	include/SimpleIni.h	/^        Entry & operator=(const Entry & rhs) {$/;"	f	struct:CSimpleIniTempl::Entry
operator =	include/SimpleIni.h	/^    SI_ConvertA & operator=(const SI_ConvertA & rhs) {$/;"	f	class:SI_ConvertA
operator =	include/SimpleIni.h	/^    SI_ConvertW & operator=(const SI_ConvertW & rhs) {$/;"	f	class:SI_ConvertW
operator >	include/SimpleIni.h	/^        bool operator>(const Entry & rhs) const { return LoadOrder()(rhs, *this); }$/;"	f	struct:CSimpleIniTempl::Entry
pComment	include/SimpleIni.h	/^        const SI_CHAR * pComment;$/;"	m	struct:CSimpleIniTempl::Entry
pItem	include/SimpleIni.h	/^        const SI_CHAR * pItem;$/;"	m	struct:CSimpleIniTempl::Entry
~CSimpleIniTempl	include/SimpleIni.h	/^CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::~CSimpleIniTempl()$/;"	f	class:CSimpleIniTempl
~OutputWriter	include/SimpleIni.h	/^        virtual ~OutputWriter() { }$/;"	f	class:CSimpleIniTempl::OutputWriter
~SI_ConvertW	include/SimpleIni.h	/^    ~SI_ConvertW() { if (m_pConverter) ucnv_close(m_pConverter); }$/;"	f	class:SI_ConvertW
SOUND_H	include/Sound.h	2;"	d
Sound	include/Sound.h	/^class Sound$/;"	c
buffer	include/Sound.h	/^	ALuint buffer;$/;"	m	class:Sound
source	include/Sound.h	/^	ALuint source;$/;"	m	class:Sound
STATE_MACHINE_H	include/StateMachine.h	2;"	d
StateMachine	include/StateMachine.h	/^	StateMachine(StateMachineCB callback, T initialState)$/;"	f	class:StateMachine
StateMachine	include/StateMachine.h	/^class StateMachine$/;"	c
StateMachineCB	include/StateMachine.h	/^	typedef std::function<void(T, T)> StateMachineCB;$/;"	t	class:StateMachine
callback	include/StateMachine.h	/^	StateMachineCB callback;$/;"	m	class:StateMachine
currState	include/StateMachine.h	/^	T prevState, currState;$/;"	m	class:StateMachine
getState	include/StateMachine.h	/^	T getState()$/;"	f	class:StateMachine
prevState	include/StateMachine.h	/^	T prevState, currState;$/;"	m	class:StateMachine
updateState	include/StateMachine.h	/^	void updateState(T state)$/;"	f	class:StateMachine
UIEntity	include/UIEntity.h	/^class UIEntity : public Entity$/;"	c
UI_ENTITY_H	include/UIEntity.h	2;"	d
AssetFactory	src/AssetFactory.cpp	/^AssetFactory::AssetFactory(SDL_Renderer* gRenderer){$/;"	f	class:AssetFactory
getAsset	src/AssetFactory.cpp	/^SDL_Texture* AssetFactory::getAsset<SDL_Texture>(string key){$/;"	f	class:AssetFactory
getAsset	src/AssetFactory.cpp	/^Sound* AssetFactory::getAsset<Sound>(string key){$/;"	f	class:AssetFactory
printAssets	src/AssetFactory.cpp	/^void AssetFactory::printAssets(){$/;"	f	class:AssetFactory
~AssetFactory	src/AssetFactory.cpp	/^AssetFactory::~AssetFactory(){$/;"	f	class:AssetFactory
Ball	src/Ball.cpp	/^Ball::Ball(Paddle* paddle, AssetFactory* assetFactory)$/;"	f	class:Ball
getCenter	src/Ball.cpp	/^SDL_Point Ball::getCenter()$/;"	f	class:Ball
getOrigin	src/Ball.cpp	/^SDL_Point Ball::getOrigin()$/;"	f	class:Ball
getSize	src/Ball.cpp	/^SDL_Point Ball::getSize()$/;"	f	class:Ball
getVelocity	src/Ball.cpp	/^SDL_Point Ball::getVelocity()$/;"	f	class:Ball
handleGameEvents	src/Ball.cpp	/^void Ball::handleGameEvents(const Uint8* events)$/;"	f	class:Ball
handleKeyboardEvents	src/Ball.cpp	/^void Ball::handleKeyboardEvents(const Uint8* keyStates)$/;"	f	class:Ball
handleMouseEvents	src/Ball.cpp	/^void Ball::handleMouseEvents(int mouseState, int x, int y)$/;"	f	class:Ball
isDeletable	src/Ball.cpp	/^bool Ball::isDeletable()$/;"	f	class:Ball
render	src/Ball.cpp	/^void Ball::render(SDL_Renderer* gRenderer)$/;"	f	class:Ball
resolveCollision	src/Ball.cpp	/^void Ball::resolveCollision(PhysicsEntity* collider, PhysicsEntity* object)$/;"	f	class:Ball
stateChanged	src/Ball.cpp	/^void Ball::stateChanged(BallState prevState, BallState currState)$/;"	f	class:Ball
type	src/Ball.cpp	/^char* Ball::type()$/;"	f	class:Ball
update	src/Ball.cpp	/^void Ball::update(int frameTime)$/;"	f	class:Ball
updateVelocityWithAngle	src/Ball.cpp	/^void Ball::updateVelocityWithAngle(float degrees)$/;"	f	class:Ball
~Ball	src/Ball.cpp	/^Ball::~Ball()$/;"	f	class:Ball
BallsIndicator	src/BallsIndicator.cpp	/^BallsIndicator::BallsIndicator(float x, float y, AssetFactory* assetFactory)$/;"	f	class:BallsIndicator
getCenter	src/BallsIndicator.cpp	/^SDL_Point BallsIndicator::getCenter()$/;"	f	class:BallsIndicator
getOrigin	src/BallsIndicator.cpp	/^SDL_Point BallsIndicator::getOrigin()$/;"	f	class:BallsIndicator
getSize	src/BallsIndicator.cpp	/^SDL_Point BallsIndicator::getSize()$/;"	f	class:BallsIndicator
handleGameEvents	src/BallsIndicator.cpp	/^void BallsIndicator::handleGameEvents(const Uint8* events)$/;"	f	class:BallsIndicator
handleKeyboardEvents	src/BallsIndicator.cpp	/^void BallsIndicator::handleKeyboardEvents(const Uint8*)$/;"	f	class:BallsIndicator
handleMouseEvents	src/BallsIndicator.cpp	/^void BallsIndicator::handleMouseEvents(int mouseState, int x, int y)$/;"	f	class:BallsIndicator
isDeletable	src/BallsIndicator.cpp	/^bool BallsIndicator::isDeletable()$/;"	f	class:BallsIndicator
render	src/BallsIndicator.cpp	/^void BallsIndicator::render(SDL_Renderer* gRenderer)$/;"	f	class:BallsIndicator
type	src/BallsIndicator.cpp	/^char* BallsIndicator::type()$/;"	f	class:BallsIndicator
update	src/BallsIndicator.cpp	/^void BallsIndicator::update(int frameTime)$/;"	f	class:BallsIndicator
~BallsIndicator	src/BallsIndicator.cpp	/^BallsIndicator::~BallsIndicator()$/;"	f	class:BallsIndicator
Block	src/Block.cpp	/^Block::Block(int x, int y, int width, int height, int* blockCount, AssetFactory* assetFactory, BlockColor color)$/;"	f	class:Block
alphaTransitionComplete	src/Block.cpp	/^void Block::alphaTransitionComplete()$/;"	f	class:Block
getCenter	src/Block.cpp	/^SDL_Point Block::getCenter()$/;"	f	class:Block
getOrigin	src/Block.cpp	/^SDL_Point Block::getOrigin()$/;"	f	class:Block
getSize	src/Block.cpp	/^SDL_Point Block::getSize()$/;"	f	class:Block
getVelocity	src/Block.cpp	/^SDL_Point Block::getVelocity()$/;"	f	class:Block
handleGameEvents	src/Block.cpp	/^void Block::handleGameEvents(const Uint8* events)$/;"	f	class:Block
handleKeyboardEvents	src/Block.cpp	/^void Block::handleKeyboardEvents(const Uint8* keyStates)$/;"	f	class:Block
handleMouseEvents	src/Block.cpp	/^void Block::handleMouseEvents(int mouseState, int x, int y)$/;"	f	class:Block
isDeletable	src/Block.cpp	/^bool Block::isDeletable()$/;"	f	class:Block
render	src/Block.cpp	/^void Block::render(SDL_Renderer* gRenderer)$/;"	f	class:Block
resolveCollision	src/Block.cpp	/^void Block::resolveCollision(PhysicsEntity* collider, PhysicsEntity* object)$/;"	f	class:Block
stateChanged	src/Block.cpp	/^void Block::stateChanged(BlockState prevState, BlockState currState){$/;"	f	class:Block
type	src/Block.cpp	/^char* Block::type()$/;"	f	class:Block
update	src/Block.cpp	/^void Block::update(int frameTime)$/;"	f	class:Block
~Block	src/Block.cpp	/^Block::~Block()$/;"	f	class:Block
Button	src/Button.cpp	/^Button::Button(const char* fontName, const char* text, GameEvent event, int x, int y)$/;"	f	class:Button
getCenter	src/Button.cpp	/^SDL_Point Button::getCenter()$/;"	f	class:Button
getOrigin	src/Button.cpp	/^SDL_Point Button::getOrigin()$/;"	f	class:Button
getSize	src/Button.cpp	/^SDL_Point Button::getSize()$/;"	f	class:Button
handleGameEvents	src/Button.cpp	/^void Button::handleGameEvents(const Uint8* events)$/;"	f	class:Button
handleKeyboardEvents	src/Button.cpp	/^void Button::handleKeyboardEvents(const Uint8*)$/;"	f	class:Button
handleMouseEvents	src/Button.cpp	/^void Button::handleMouseEvents(int mouseState, int x, int y)$/;"	f	class:Button
render	src/Button.cpp	/^void Button::render(SDL_Renderer* gRenderer)$/;"	f	class:Button
type	src/Button.cpp	/^char* Button::type()$/;"	f	class:Button
update	src/Button.cpp	/^void Button::update(int frameTime)$/;"	f	class:Button
~Button	src/Button.cpp	/^Button::~Button()$/;"	f	class:Button
Collider	src/Collider.cpp	/^Collider::Collider(Entity* entity)$/;"	f	class:Collider
getCenter	src/Collider.cpp	/^SDL_Point Collider::getCenter()$/;"	f	class:Collider
getOrigin	src/Collider.cpp	/^SDL_Point Collider::getOrigin()$/;"	f	class:Collider
getSize	src/Collider.cpp	/^SDL_Point Collider::getSize()$/;"	f	class:Collider
getVelocity	src/Collider.cpp	/^SDL_Point Collider::getVelocity()$/;"	f	class:Collider
handleGameEvents	src/Collider.cpp	/^void Collider::handleGameEvents(const Uint8* events)$/;"	f	class:Collider
handleKeyboardEvents	src/Collider.cpp	/^void Collider::handleKeyboardEvents(const Uint8*)$/;"	f	class:Collider
handleMouseEvents	src/Collider.cpp	/^void Collider::handleMouseEvents(int mouseState, int x, int y)$/;"	f	class:Collider
isDeletable	src/Collider.cpp	/^bool Collider::isDeletable()$/;"	f	class:Collider
render	src/Collider.cpp	/^void Collider::render(SDL_Renderer*)$/;"	f	class:Collider
resolveCollision	src/Collider.cpp	/^void Collider::resolveCollision(PhysicsEntity* collider, PhysicsEntity* object)$/;"	f	class:Collider
type	src/Collider.cpp	/^char* Collider::type()$/;"	f	class:Collider
update	src/Collider.cpp	/^void Collider::update(int frameTime)$/;"	f	class:Collider
~Collider	src/Collider.cpp	/^Collider::~Collider()$/;"	f	class:Collider
Effects	src/Effects.cpp	/^Effects::Effects(SDL_Texture* texture, EffectsCB alphaCB, EffectsCB colorCB){$/;"	f	class:Effects
addAlphaTransition	src/Effects.cpp	/^void Effects::addAlphaTransition(Uint32 interval, int start_a, int final_a){$/;"	f	class:Effects
addColorTransition	src/Effects.cpp	/^void Effects::addColorTransition(Uint32 interval, int r, int g, int b){$/;"	f	class:Effects
apply	src/Effects.cpp	/^void Effects::apply(){$/;"	f	class:Effects
reset	src/Effects.cpp	/^void Effects::reset(){$/;"	f	class:Effects
~Entity	src/Entity.cpp	/^Entity::~Entity()$/;"	f	class:Entity
EventManager	src/EventManager.cpp	/^EventManager::EventManager()$/;"	f	class:EventManager
Instance	src/EventManager.cpp	/^EventManager* EventManager::Instance(){$/;"	f	class:EventManager
clearGameEvents	src/EventManager.cpp	/^void EventManager::clearGameEvents()$/;"	f	class:EventManager
deregisterHandler	src/EventManager.cpp	/^void EventManager::deregisterHandler(IEventHandler* handler)$/;"	f	class:EventManager
handleGameEvents	src/EventManager.cpp	/^void EventManager::handleGameEvents()$/;"	f	class:EventManager
handleKeyboardEvents	src/EventManager.cpp	/^void EventManager::handleKeyboardEvents()$/;"	f	class:EventManager
handleMouseEvents	src/EventManager.cpp	/^void EventManager::handleMouseEvents()$/;"	f	class:EventManager
instance	src/EventManager.cpp	/^EventManager* EventManager::instance = NULL;$/;"	m	class:EventManager	file:
instanceFlag	src/EventManager.cpp	/^bool EventManager::instanceFlag = false;$/;"	m	class:EventManager	file:
printHandlers	src/EventManager.cpp	/^void EventManager::printHandlers()$/;"	f	class:EventManager
registerHandler	src/EventManager.cpp	/^void EventManager::registerHandler(IEventHandler* handler)$/;"	f	class:EventManager
reportGameEvent	src/EventManager.cpp	/^void EventManager::reportGameEvent(GameEvent event)$/;"	f	class:EventManager
GameManager	src/GameManager.cpp	/^GameManager::GameManager(AssetFactory* assetFactory)$/;"	f	class:GameManager
detectCollisions	src/GameManager.cpp	/^void GameManager::detectCollisions()$/;"	f	class:GameManager
gameLost	src/GameManager.cpp	/^void GameManager::gameLost()$/;"	f	class:GameManager
gameWon	src/GameManager.cpp	/^void GameManager::gameWon()$/;"	f	class:GameManager
handleGameEvents	src/GameManager.cpp	/^void GameManager::handleGameEvents(const Uint8* events)$/;"	f	class:GameManager
handleKeyboardEvents	src/GameManager.cpp	/^void GameManager::handleKeyboardEvents(const Uint8* keyStates)$/;"	f	class:GameManager
handleMouseEvents	src/GameManager.cpp	/^void GameManager::handleMouseEvents(int mouseState, int x, int y)$/;"	f	class:GameManager
render	src/GameManager.cpp	/^void GameManager::render(SDL_Renderer* gRenderer)$/;"	f	class:GameManager
resetLevel	src/GameManager.cpp	/^void GameManager::resetLevel()$/;"	f	class:GameManager
type	src/GameManager.cpp	/^char* GameManager::type()$/;"	f	class:GameManager
update	src/GameManager.cpp	/^void GameManager::update(int frameTime)$/;"	f	class:GameManager
~GameManager	src/GameManager.cpp	/^GameManager::~GameManager()$/;"	f	class:GameManager
Globals	src/Globals.cpp	/^namespace Globals$/;"	n	file:
ballHeight	src/Globals.cpp	/^	int ballHeight;$/;"	m	namespace:Globals	file:
ballWidth	src/Globals.cpp	/^	int ballWidth;$/;"	m	namespace:Globals	file:
blockHeight	src/Globals.cpp	/^	int blockHeight;$/;"	m	namespace:Globals	file:
blockWidth	src/Globals.cpp	/^	int blockWidth;$/;"	m	namespace:Globals	file:
fieldHeight	src/Globals.cpp	/^	int fieldHeight;$/;"	m	namespace:Globals	file:
fieldRatio	src/Globals.cpp	/^	float fieldRatio;$/;"	m	namespace:Globals	file:
fieldWidth	src/Globals.cpp	/^	int fieldWidth;$/;"	m	namespace:Globals	file:
fullScreen	src/Globals.cpp	/^	int fullScreen;$/;"	m	namespace:Globals	file:
paddleHeight	src/Globals.cpp	/^	int paddleHeight;$/;"	m	namespace:Globals	file:
paddleWidth	src/Globals.cpp	/^	int paddleWidth;$/;"	m	namespace:Globals	file:
screenHeight	src/Globals.cpp	/^	int screenHeight;$/;"	m	namespace:Globals	file:
screenWidth	src/Globals.cpp	/^	int screenWidth;$/;"	m	namespace:Globals	file:
xOffset	src/Globals.cpp	/^	int xOffset;$/;"	m	namespace:Globals	file:
yOffset	src/Globals.cpp	/^	int yOffset;$/;"	m	namespace:Globals	file:
MenuManager	src/MenuManager.cpp	/^MenuManager::MenuManager()$/;"	f	class:MenuManager
handleGameEvents	src/MenuManager.cpp	/^void MenuManager::handleGameEvents(const Uint8* events)$/;"	f	class:MenuManager
handleKeyboardEvents	src/MenuManager.cpp	/^void MenuManager::handleKeyboardEvents(const Uint8* keyStates)$/;"	f	class:MenuManager
handleMouseEvents	src/MenuManager.cpp	/^void MenuManager::handleMouseEvents(int mouseState, int x, int y)$/;"	f	class:MenuManager
render	src/MenuManager.cpp	/^void MenuManager::render(SDL_Renderer* gRenderer)$/;"	f	class:MenuManager
setMainMenuButtons	src/MenuManager.cpp	/^void MenuManager::setMainMenuButtons()$/;"	f	class:MenuManager
setPauseMenuButtons	src/MenuManager.cpp	/^void MenuManager::setPauseMenuButtons()$/;"	f	class:MenuManager
type	src/MenuManager.cpp	/^char* MenuManager::type()$/;"	f	class:MenuManager
update	src/MenuManager.cpp	/^void MenuManager::update(int frameTime)$/;"	f	class:MenuManager
~MenuManager	src/MenuManager.cpp	/^MenuManager::~MenuManager()$/;"	f	class:MenuManager
Paddle	src/Paddle.cpp	/^Paddle::Paddle(float x, float y, AssetFactory* assetFactory)$/;"	f	class:Paddle
getCenter	src/Paddle.cpp	/^SDL_Point Paddle::getCenter()$/;"	f	class:Paddle
getOrigin	src/Paddle.cpp	/^SDL_Point Paddle::getOrigin()$/;"	f	class:Paddle
getSize	src/Paddle.cpp	/^SDL_Point Paddle::getSize()$/;"	f	class:Paddle
getVelocity	src/Paddle.cpp	/^SDL_Point Paddle::getVelocity()$/;"	f	class:Paddle
handleGameEvents	src/Paddle.cpp	/^void Paddle::handleGameEvents(const Uint8* events)$/;"	f	class:Paddle
handleKeyboardEvents	src/Paddle.cpp	/^void Paddle::handleKeyboardEvents(const Uint8* keyStates)$/;"	f	class:Paddle
handleMouseEvents	src/Paddle.cpp	/^void Paddle::handleMouseEvents(int mouseState, int x, int y)$/;"	f	class:Paddle
isDeletable	src/Paddle.cpp	/^bool Paddle::isDeletable()$/;"	f	class:Paddle
render	src/Paddle.cpp	/^void Paddle::render(SDL_Renderer* gRenderer)$/;"	f	class:Paddle
resolveCollision	src/Paddle.cpp	/^void Paddle::resolveCollision(PhysicsEntity* collider, PhysicsEntity* object)$/;"	f	class:Paddle
stateChanged	src/Paddle.cpp	/^void stateChanged(PaddleState prevState, PaddleState currState)$/;"	f
type	src/Paddle.cpp	/^char* Paddle::type()$/;"	f	class:Paddle
update	src/Paddle.cpp	/^void Paddle::update(int frameTime)$/;"	f	class:Paddle
~Paddle	src/Paddle.cpp	/^Paddle::~Paddle()$/;"	f	class:Paddle
PauseMenuManager	src/PauseMenuManager.cpp	/^PauseMenuManager::PauseMenuManager()$/;"	f	class:PauseMenuManager
handleGameEvents	src/PauseMenuManager.cpp	/^void PauseMenuManager::handleGameEvents(const Uint8* events)$/;"	f	class:PauseMenuManager
handleKeyboardEvents	src/PauseMenuManager.cpp	/^void PauseMenuManager::handleKeyboardEvents(const Uint8* keyStates)$/;"	f	class:PauseMenuManager
handleMouseEvents	src/PauseMenuManager.cpp	/^void PauseMenuManager::handleMouseEvents(int mouseState, int x, int y)$/;"	f	class:PauseMenuManager
render	src/PauseMenuManager.cpp	/^void PauseMenuManager::render(SDL_Renderer* gRenderer)$/;"	f	class:PauseMenuManager
shouldQuit	src/PauseMenuManager.cpp	/^bool PauseMenuManager::shouldQuit()$/;"	f	class:PauseMenuManager
type	src/PauseMenuManager.cpp	/^char* PauseMenuManager::type()$/;"	f	class:PauseMenuManager
update	src/PauseMenuManager.cpp	/^void PauseMenuManager::update(int frameTime)$/;"	f	class:PauseMenuManager
~PauseMenuManager	src/PauseMenuManager.cpp	/^PauseMenuManager::~PauseMenuManager()$/;"	f	class:PauseMenuManager
ProgramManager	src/ProgramManager.cpp	/^ProgramManager::ProgramManager(SDL_Renderer* gRenderer)$/;"	f	class:ProgramManager
handleGameEvents	src/ProgramManager.cpp	/^void ProgramManager::handleGameEvents(const Uint8* events)$/;"	f	class:ProgramManager
handleKeyboardEvents	src/ProgramManager.cpp	/^void ProgramManager::handleKeyboardEvents(const Uint8* keyStates)$/;"	f	class:ProgramManager
handleMouseEvents	src/ProgramManager.cpp	/^void ProgramManager::handleMouseEvents(int mouseState, int x, int y)$/;"	f	class:ProgramManager
loop	src/ProgramManager.cpp	/^void ProgramManager::loop()$/;"	f	class:ProgramManager
type	src/ProgramManager.cpp	/^char* ProgramManager::type()$/;"	f	class:ProgramManager
~ProgramManager	src/ProgramManager.cpp	/^ProgramManager::~ProgramManager()$/;"	f	class:ProgramManager
Sound	src/Sound.cpp	/^Sound::Sound(string filename)$/;"	f	class:Sound
checkError	src/Sound.cpp	/^bool checkError(string source)$/;"	f
pause	src/Sound.cpp	/^void Sound::pause()$/;"	f	class:Sound
play	src/Sound.cpp	/^void Sound::play()$/;"	f	class:Sound
rewind	src/Sound.cpp	/^void Sound::rewind()$/;"	f	class:Sound
stop	src/Sound.cpp	/^void Sound::stop()$/;"	f	class:Sound
~Sound	src/Sound.cpp	/^Sound::~Sound()$/;"	f	class:Sound
close	src/main.cpp	/^void close()$/;"	f
gRenderer	src/main.cpp	/^SDL_Renderer* gRenderer = NULL;$/;"	v
gWindow	src/main.cpp	/^SDL_Window* gWindow = NULL;$/;"	v
ini	src/main.cpp	/^CSimpleIniA ini;$/;"	v
init	src/main.cpp	/^bool init()$/;"	f
load_settings	src/main.cpp	/^void load_settings()$/;"	f
main	src/main.cpp	/^int main( int argc, char* args[] )$/;"	f
