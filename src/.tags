!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BALL_H	Ball.h	2;"	d
Ball	Ball.cpp	/^Ball::Ball(Paddle* paddle)$/;"	f	class:Ball
Ball	Ball.h	/^class Ball : public Entity$/;"	c
ENTITY_H	Entity.h	2;"	d
EVENT_MANAGER_H	EventManager.h	2;"	d
Entity	Entity.cpp	/^Entity::Entity()$/;"	f	class:Entity
Entity	Entity.h	/^class Entity : public IEventHandler$/;"	c
EventManager	EventManager.h	/^	EventManager(){};$/;"	f	class:EventManager
EventManager	EventManager.h	/^class EventManager$/;"	c
FLYING_ST	Ball.h	/^	FLYING_ST$/;"	e	enum:states
GAME_MANAGER_H	GameManager.h	2;"	d
GameManager	GameManager.cpp	/^GameManager::GameManager()$/;"	f	class:GameManager
GameManager	GameManager.h	/^class GameManager$/;"	c
IEVENT_HANDLER_H	IEventHandler.h	2;"	d
IEventHandler	IEventHandler.h	/^class IEventHandler$/;"	c
Instance	EventManager.cpp	/^EventManager* EventManager::Instance(){$/;"	f	class:EventManager
PADDLE_H	Paddle.h	2;"	d
Paddle	Paddle.cpp	/^Paddle::Paddle()$/;"	f	class:Paddle
Paddle	Paddle.h	/^class Paddle : public Entity$/;"	c
SCREEN_HEIGHT	Globals.h	2;"	d
SCREEN_WIDTH	Globals.h	1;"	d
WAITING_ST	Ball.h	/^	WAITING_ST,$/;"	e	enum:states
close	main.cpp	/^void close()$/;"	f
detectCollisions	GameManager.cpp	/^void GameManager::detectCollisions()$/;"	f	class:GameManager
e	EventManager.h	/^	SDL_Event e;$/;"	m	class:EventManager
entities	GameManager.h	/^	std::vector<Entity*> entities;$/;"	m	class:GameManager
eventHandlers	EventManager.h	/^	std::vector<IEventHandler*> eventHandlers;$/;"	m	class:EventManager
frameTime	main.cpp	/^Uint64 frameTime, lastFrameTime = 0;$/;"	v
gRenderer	main.cpp	/^SDL_Renderer* gRenderer = NULL;$/;"	v
gWindow	main.cpp	/^SDL_Window* gWindow = NULL;$/;"	v
gameManager	main.cpp	/^GameManager gameManager;$/;"	v
getCenter	Ball.cpp	/^SDL_Point Ball::getCenter()$/;"	f	class:Ball
getCenter	Entity.cpp	/^SDL_Point Entity::getCenter()$/;"	f	class:Entity
getCenter	Paddle.cpp	/^SDL_Point Paddle::getCenter()$/;"	f	class:Paddle
getOrigin	Ball.cpp	/^SDL_Point Ball::getOrigin()$/;"	f	class:Ball
getOrigin	Paddle.cpp	/^SDL_Point Paddle::getOrigin()$/;"	f	class:Paddle
getSize	Ball.cpp	/^SDL_Point Ball::getSize()$/;"	f	class:Ball
getSize	Paddle.cpp	/^SDL_Point Paddle::getSize()$/;"	f	class:Paddle
getVelocity	Ball.cpp	/^SDL_Point Ball::getVelocity()$/;"	f	class:Ball
getVelocity	Paddle.cpp	/^SDL_Point Paddle::getVelocity()$/;"	f	class:Paddle
handleEvents	Ball.cpp	/^void Ball::handleEvents(const Uint8* keyStates)$/;"	f	class:Ball
handleEvents	Entity.cpp	/^void Entity::handleEvents(const Uint8* keyStates)$/;"	f	class:Entity
handleEvents	EventManager.cpp	/^void EventManager::handleEvents()$/;"	f	class:EventManager
handleEvents	GameManager.cpp	/^void GameManager::handleEvents()$/;"	f	class:GameManager
handleEvents	Paddle.cpp	/^void Paddle::handleEvents(const Uint8* keyStates)$/;"	f	class:Paddle
height	Ball.h	/^	int height = 20.0;$/;"	m	class:Ball
height	Entity.h	/^	int width, height;$/;"	m	class:Entity
height	Paddle.h	/^	int height = 20.0;$/;"	m	class:Paddle
init	main.cpp	/^bool init()$/;"	f
instance	EventManager.cpp	/^EventManager* EventManager::instance = NULL;$/;"	m	class:EventManager	file:
instance	EventManager.h	/^	static EventManager* instance;$/;"	m	class:EventManager
instanceFlag	EventManager.cpp	/^bool EventManager::instanceFlag = false;$/;"	m	class:EventManager	file:
instanceFlag	EventManager.h	/^	static bool instanceFlag;$/;"	m	class:EventManager
lastFrameTime	main.cpp	/^Uint64 frameTime, lastFrameTime = 0;$/;"	v
machineState	Ball.h	/^	int machineState;$/;"	m	class:Ball
main	main.cpp	/^int main( int argc, char* args[] )$/;"	f
max_vel	Entity.h	/^	float max_vel = 200;$/;"	m	class:Entity
paddle	Ball.h	/^	Paddle* paddle;$/;"	m	class:Ball
posX	Entity.h	/^	float posX, posY;$/;"	m	class:Entity
posY	Entity.h	/^	float posX, posY;$/;"	m	class:Entity
quit	GameManager.h	/^	bool quit;$/;"	m	class:GameManager
registerHandler	EventManager.cpp	/^void EventManager::registerHandler(IEventHandler* handler)$/;"	f	class:EventManager
render	Ball.cpp	/^void Ball::render(SDL_Renderer* gRenderer)$/;"	f	class:Ball
render	Entity.cpp	/^void Entity::render(SDL_Renderer* gRenderer)$/;"	f	class:Entity
render	GameManager.cpp	/^void GameManager::render(SDL_Renderer* gRenderer)$/;"	f	class:GameManager
render	Paddle.cpp	/^void Paddle::render(SDL_Renderer* gRenderer)$/;"	f	class:Paddle
resolveCollision	Ball.cpp	/^void Ball::resolveCollision(Entity* collidedObject)$/;"	f	class:Ball
resolveCollision	Paddle.cpp	/^void Paddle::resolveCollision(Entity* collidedObject)$/;"	f	class:Paddle
shouldQuit	GameManager.cpp	/^bool GameManager::shouldQuit()$/;"	f	class:GameManager
states	Ball.h	/^enum states$/;"	g
update	Ball.cpp	/^void Ball::update(int frameTime)$/;"	f	class:Ball
update	Entity.cpp	/^void Entity::update(int frameTime)$/;"	f	class:Entity
update	GameManager.cpp	/^void GameManager::update(int frameTime)$/;"	f	class:GameManager
update	Paddle.cpp	/^void Paddle::update(int frameTime)$/;"	f	class:Paddle
velX	Entity.h	/^	float velX, velY;$/;"	m	class:Entity
velY	Entity.h	/^	float velX, velY;$/;"	m	class:Entity
width	Ball.h	/^	int width = 20.0;$/;"	m	class:Ball
width	Entity.h	/^	int width, height;$/;"	m	class:Entity
width	Paddle.h	/^	int width = 60.0;$/;"	m	class:Paddle
~GameManager	GameManager.cpp	/^GameManager::~GameManager()$/;"	f	class:GameManager
